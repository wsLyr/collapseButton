// Copyright (c) 2017-2020 Xiamen Yaji Software Co., Ltd.
CCEffect %{
  techniques:
  - passes:
    - vert: sprite-vs:vert
      frag: sprite-fs:frag
      depthStencilState:
        depthTest: false
        depthWrite: false
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendDstAlpha: one_minus_src_alpha
      rasterizerState:
        cullMode: none
      properties:
        alphaThreshold: { value: 0.5 }
        touchPos:   { value: [-0.5, -0.5] }
        rect:   { value: [0.0, 0.0, 0.0, 0.0] }
}%

CCProgram sprite-vs %{
  precision highp float;
  #include <builtin/uniforms/cc-global>
  #if USE_LOCAL
    #include <builtin/uniforms/cc-local>
  #endif
  #if SAMPLE_FROM_RT
    #include <common/common-define>
  #endif
  in vec3 a_position;
  in vec2 a_texCoord;
  in vec4 a_color;

  out vec4 color;
  out vec2 uv0;

  vec4 vert () {
    vec4 pos = vec4(a_position, 1);

    #if USE_LOCAL
      pos = cc_matWorld * pos;
    #endif

    #if USE_PIXEL_ALIGNMENT
      pos = cc_matView * pos;
      pos.xyz = floor(pos.xyz);
      pos = cc_matProj * pos;
    #else
      pos = cc_matViewProj * pos;
    #endif

    uv0 = a_texCoord;
    #if SAMPLE_FROM_RT
      CC_HANDLE_RT_SAMPLE_FLIP(uv0);
    #endif
    color = a_color;

    return pos;
  }
}%

CCProgram sprite-fs %{
  precision highp float;
  #include <builtin/internal/embedded-alpha>
  #include <builtin/internal/alpha-test>
  #include <builtin/uniforms/cc-global>

  in vec4 color;

  uniform Constant {
    vec4 rect;
    vec2 touchPos;
  };

  #if USE_TEXTURE
    in vec2 uv0;
    #pragma builtin(local)
    layout(set = 2, binding = 12) uniform sampler2D cc_spriteTexture;
  #endif

  float inverseLerp(float from, float to, float val){
	  return (val - from) / (to - from);
  }

  vec4 frag () {
    vec4 o = vec4(1.0, 1.0, 1.0, 1.0);

    #if USE_TEXTURE
      o *= CCSampleWithAlphaSeparated(cc_spriteTexture, uv0);
      #if IS_GRAY
        float gray  = 0.2126 * o.r + 0.7152 * o.g + 0.0722 * o.b;
        o.r = o.g = o.b = gray;
      #endif
    #endif

    o *= color;
    ALPHA_TEST(o);
    vec2 pos = touchPos; // 中心点位置
    vec2 uv = uv0;
    float size = 0.2; // 定义影响范围
    float offset = 0.000;
    float smoothEdge = 0.000;
    float _Progress = 0.25;
    if(touchPos.x >= 0. && touchPos.y >= 0.){
      if(uv.x >= rect.x + offset && uv.y >= rect.y + offset && uv.x <= rect.x + rect.z - offset && uv.y <= rect.y + rect.w - offset){
          // //第一种塌陷效果 
          // vec2 dir = (uv - pos);

          // float dis = length(dir);

          // //uv = i.uv + normalize(uv)*(1/(dis + 0.01f) * 0.07f)*(_Progress);
          // vec2 newUv = uv + normalize(dir)*(1.0-length(dir))*(_Progress);
          
          // vec4 c = texture(cc_spriteTexture, newUv);    

          // o = c * (1.0 - _Progress);

        //第二种塌陷
        // 计算到矩形边界的距离
        float distX = min(min(uv.x - rect.x, rect.x + rect.z - uv.x), smoothEdge);
        float distY = min(min(uv.y - rect.y, rect.y + rect.w - uv.y), smoothEdge); 
        float distToEdge = min(distX, distY);

        // 使用smoothstep来创建从0到1的平滑过渡
        float edgeFactor = smoothstep(-smoothEdge, smoothEdge, distToEdge);

        vec4 BACKGROUND_COLOR = vec4(0, 0, 0, 0);
        float IDLE_DURATION = 1.0;
        float COLLAPSE_DURATION = 2.0;
        float COLLAPSE_MIN_POWER = 1.0;
        float COLLAPSE_MAX_POWER = 20.0;
        float SCALE_DURATION = 1.0;

        float totalDuration = IDLE_DURATION + COLLAPSE_DURATION + SCALE_DURATION;
        float time = mod(cc_time.x, totalDuration); 

        float collapseProgress = clamp(inverseLerp(IDLE_DURATION, IDLE_DURATION + COLLAPSE_DURATION, 1.25), 0.0, 1.0);
        float scaleProgress = clamp(inverseLerp(IDLE_DURATION + COLLAPSE_DURATION, totalDuration, 1.25), 0.0, 1.0);

        float collapsePower = mix(COLLAPSE_MIN_POWER, COLLAPSE_MAX_POWER, collapseProgress); 
        
        // vec2 center = vec2(0.5, 0.5);
        vec2 center = pos;
        vec2 offset = uv - center;
        float d = length(offset);
        float newD = pow(d * 2.0, 1.0 / collapsePower) / 8.0;
        vec2 newOffset = normalize(offset) * newD / (1.0 - scaleProgress);
        vec2 newUv = center + newOffset;

        vec4 collapsedColor = texture(cc_spriteTexture, newUv);

        // Output to screen
        o = mix(collapsedColor, BACKGROUND_COLOR, scaleProgress * edgeFactor);
      }
    }

    return o;
  }
}%
